from dataclasses import dataclass, field
from datetime import datetime, timezone

from app.models.users import select_profile_img


@dataclass
class RegisteredComment:
    """
    Comment from a registered user.

    Data required to create a new `RegisteredComment`:
    - `name`
    - `email`
    - `post_uid` -> should link with an existing post
    - `comment_uid` -> should be generated by `comment_uid_generator.generate_comment_uid()`
    - `comment`

    Fields that are automatically generated:
    - `profile_link`
    - `profile_img_url`
    """

    name: str
    email: str
    post_uid: str
    comment_uid: str
    comment: str
    profile_link: str = ""
    profile_img_url: str = ""
    created_at: datetime = field(default_factory=lambda: datetime.now(timezone.utc))

    def __post_init__(self):
        if not self.profile_link:
            self.profile_link = f"/@{self.name}/about"
        if not self.profile_img_url:
            self.profile_img_url = f"/@{self.name}/get-profile-img"


@dataclass
class AnonymousComment:
    """
    Comment from an anonymous user.

    Data required to create a new `AnonymousComment`:
    - `name`
    - `email`
    - `post_uid` -> should link with an existing post
    - `comment_uid` -> should be generated by `comment_uid_generator.generate_comment_uid()`
    - `comment`

    Fields that are automatically generated:
    - `profile_link`
    - `profile_img_url`
    """

    name: str
    email: str
    post_uid: str
    comment_uid: str
    comment: str
    profile_link: str = ""
    profile_img_url: str = ""
    created_at: datetime = field(default_factory=lambda: datetime.now(timezone.utc))

    def __post_init__(self):
        if not self.profile_link:
            self.profile_link = f"mailto:{self.email}"
        if not self.profile_img_url:
            self.profile_img_url = select_profile_img()
